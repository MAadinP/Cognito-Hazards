
accelerometer.elf:     file format elf32-littlenios2
accelerometer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001bc0 memsz 0x00001bc0 flags r-x
    LOAD off    0x00002be0 vaddr 0x00011be0 paddr 0x00011c84 align 2**12
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
    LOAD off    0x00002d28 vaddr 0x00011d28 paddr 0x00011d28 align 2**12
         filesz 0x00000000 memsz 0x000001f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001784  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000002dc  00011904  00011904  00002904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000a4  00011be0  00011c84  00002be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001f0  00011d28  00011d28  00002d28  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00011f18  00011f18  00002c84  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002c84  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000004a0  00000000  00000000  00002ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004328  00000000  00000000  00003148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001dca  00000000  00000000  00007470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001e0f  00000000  00000000  0000923a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000620  00000000  00000000  0000b04c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016ec  00000000  00000000  0000b66c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000021b2  00000000  00000000  0000cd58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000ef0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000460  00000000  00000000  0000ef20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00010a7e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00010a81  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00010a84  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00010a85  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00010a86  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00010a8f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00010a98  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  00010aa1  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000046  00000000  00000000  00010ab3  2**0
                  CONTENTS, READONLY
 26 .jdi          00005009  00000000  00000000  00010af9  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000402c1  00000000  00000000  00015b02  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00011904 l    d  .rodata	00000000 .rodata
00011be0 l    d  .rwdata	00000000 .rwdata
00011d28 l    d  .bss	00000000 .bss
00011f18 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../accelerometer_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00011d28 l     O .bss	00000004 index.3820
00011d50 l     O .bss	000000c8 buffer.3819
00011a0c l     O .rodata	000000c8 coeffs
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011be0 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011750 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00011d48 g     O .bss	00000004 alt_instruction_exception_handler
00011310 g     F .text	0000002c alt_main
0001031c g     F .text	00000014 led_write
00011e18 g     O .bss	00000100 alt_irq
0001023c g     F .text	000000e0 fir_filter
00011c84 g       *ABS*	00000000 __flash_rwdata_start
00010e28 g     F .text	00000070 .hidden __fixsfsi
000101bc g     F .text	00000080 sys_timer_isr
000114f4 g     F .text	00000038 alt_putstr
00011c68 g     O .rwdata	00000004 jtag_uart
0001183c g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00011644 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011d4c g     O .bss	00000004 errno
00011d40 g     O .bss	00000004 alt_argv
00019c64 g       *ABS*	00000000 _gp
00011c0c g     O .rwdata	00000030 alt_fd_list
000117c4 g     F .text	00000074 alt_find_dev
00011844 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0001155c g     F .text	0000005c altera_avalon_jtag_uart_read
00011c6c g     O .rwdata	00000004 alt_max_fd
0001119c g     F .text	00000094 alt_irq_register
00010fbc g     F .text	00000110 .hidden __extendsfdf2
00011f18 g       *ABS*	00000000 __bss_end
00011158 g     F .text	00000044 alt_getchar
000103d4 g     F .text	00000004 get_command_char
00011d38 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00011c3c g     O .rwdata	00000028 alt_dev_null
0001174c g     F .text	00000004 alt_dcache_flush_all
00011c84 g       *ABS*	00000000 __ram_rwdata_end
00010364 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00011c70 g     O .rwdata	00000008 alt_dev_list
00011be0 g       *ABS*	00000000 __ram_rodata_end
00011d30 g     O .bss	00000001 led
00011f18 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
000110cc g     F .text	00000064 .hidden __clzsi2
000115b8 g     F .text	00000034 altera_avalon_jtag_uart_write
0001133c g     F .text	00000170 alt_printf
00010180 g     F .text	0000003c _start
00011d34 g     O .bss	00000004 level
0001154c g     F .text	00000010 alt_sys_init
000115f4 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00010e98 g     F .text	00000124 .hidden __floatsisf
00011130 g     F .text	00000028 .hidden __mulsi3
00011be0 g       *ABS*	00000000 __ram_rwdata_start
00011904 g       *ABS*	00000000 __ram_rodata_start
0001169c g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
000118b8 g     F .text	00000030 memcmp
00011f18 g       *ABS*	00000000 __alt_stack_base
00011758 g     F .text	0000006c alt_dev_llist_insert
00011d28 g       *ABS*	00000000 __bss_start
000103d8 g     F .text	00000158 main
00011d3c g     O .bss	00000004 alt_envp
00011c80 g     O .rwdata	00000004 alt_errno
000109f8 g     F .text	00000430 .hidden __mulsf3
00011904 g       *ABS*	00000000 __flash_rodata_start
0001152c g     F .text	00000020 alt_irq_init
00011ad4 g     O .rodata	00000100 .hidden __clz_tab
00011d44 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00011d2c g     O .bss	00000001 pwm
00011c78 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000115ec g     F .text	00000008 alt_up_accelerometer_spi_open_dev
00011c84 g       *ABS*	00000000 _edata
00011f18 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
000116f4 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010330 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
00011608 g     F .text	00000020 alt_up_accelerometer_spi_read
00011628 g     F .text	0000001c alt_up_accelerometer_spi_write
000118e8 g     F .text	0000001c strlen
000114ac g     F .text	00000048 alt_putchar
00011838 g     F .text	00000004 alt_icache_flush_all
00011c64 g     O .rwdata	00000004 alt_priority_mask
00010530 g     F .text	000004c8 .hidden __addsf3
00011230 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	84078604 	addi	r16,r16,7704

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a03917 	ldw	r2,-32540(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a71914 	ori	gp,gp,40036
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10874a14 	ori	r2,r2,7464

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c7c614 	ori	r3,r3,7960

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00112300 	call	11230 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00113100 	call	11310 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
     *level = (acc_read >> 1) & 0x1f;
 }

 void sys_timer_isr(void* context)
 {
     IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840004 	addi	r2,r2,4096
   101c4:	10000035 	stwio	zero,0(r2)

     if (pwm < abs(level)) {
   101c8:	d0a03417 	ldw	r2,-32560(gp)
   101cc:	d1603207 	ldb	r5,-32568(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c40804 	addi	r3,r3,4128
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>
         if (level < 0)
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
 alt_8 pwm = 0;
 alt_u8 led;
 int level;

 void led_write(alt_u8 led_pattern) {
     IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a03303 	ldbu	r2,-32564(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a03303 	ldbu	r2,-32564(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a03303 	ldbu	r2,-32564(gp)
   1020c:	18800035 	stwio	r2,0(r3)
             led_write(led >> 1);
     } else {
         led_write(led);
     }

     if (pwm > PWM_PERIOD)
   10210:	d0a03203 	ldbu	r2,-32568(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
         pwm = 0;
   10228:	d0203205 	stb	zero,-32568(gp)
   1022c:	f800283a 	ret
     else
         pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a03205 	stb	r2,-32568(gp)
   10238:	f800283a 	ret

0001023c <fir_filter>:
    -0.0179f,  0.0114f,  0.0030f, -0.0133f,  0.0044f,  0.0040f, -0.0094f,  0.0001f,  0.0033f,
    -0.0071f, -0.0024f,  0.0074f,  0.0046f
 };

 float fir_filter(float new_sample)
 {
   1023c:	defff804 	addi	sp,sp,-32
   10240:	dc000015 	stw	r16,0(sp)
     static int index = 0;

     float output = 0.0f;
     int i, j;

     buffer[index] = new_sample;
   10244:	d4203117 	ldw	r16,-32572(gp)
   10248:	00c00074 	movhi	r3,1
   1024c:	18c75404 	addi	r3,r3,7504
   10250:	8405883a 	add	r2,r16,r16
   10254:	1085883a 	add	r2,r2,r2
    -0.0179f,  0.0114f,  0.0030f, -0.0133f,  0.0044f,  0.0040f, -0.0094f,  0.0001f,  0.0033f,
    -0.0071f, -0.0024f,  0.0074f,  0.0046f
 };

 float fir_filter(float new_sample)
 {
   10258:	dd800615 	stw	r22,24(sp)
   1025c:	dd400515 	stw	r21,20(sp)
   10260:	dd000415 	stw	r20,16(sp)
   10264:	dcc00315 	stw	r19,12(sp)
   10268:	dc800215 	stw	r18,8(sp)
   1026c:	dc400115 	stw	r17,4(sp)
   10270:	dfc00715 	stw	ra,28(sp)
     static int index = 0;

     float output = 0.0f;
     int i, j;

     buffer[index] = new_sample;
   10274:	1885883a 	add	r2,r3,r2

     j = index;
     for (i = 0; i < FILTER_ORDER; i++) {
         output += buffer[j] * coeffs[i];
   10278:	05800074 	movhi	r22,1
     static int index = 0;

     float output = 0.0f;
     int i, j;

     buffer[index] = new_sample;
   1027c:	11000015 	stw	r4,0(r2)

     j = index;
   10280:	8023883a 	mov	r17,r16
     static int index = 0;

     float output = 0.0f;
     int i, j;

     buffer[index] = new_sample;
   10284:	0025883a 	mov	r18,zero
 float fir_filter(float new_sample)
 {
     static float buffer[FILTER_ORDER] = {0.0f};
     static int index = 0;

     float output = 0.0f;
   10288:	0029883a 	mov	r20,zero
   1028c:	1827883a 	mov	r19,r3

     buffer[index] = new_sample;

     j = index;
     for (i = 0; i < FILTER_ORDER; i++) {
         output += buffer[j] * coeffs[i];
   10290:	b5868304 	addi	r22,r22,6668
     int i, j;

     buffer[index] = new_sample;

     j = index;
     for (i = 0; i < FILTER_ORDER; i++) {
   10294:	05403204 	movi	r21,200
         output += buffer[j] * coeffs[i];
   10298:	8c45883a 	add	r2,r17,r17
   1029c:	1085883a 	add	r2,r2,r2
   102a0:	9587883a 	add	r3,r18,r22
   102a4:	9885883a 	add	r2,r19,r2
   102a8:	19000017 	ldw	r4,0(r3)
   102ac:	11400017 	ldw	r5,0(r2)
         j--;
   102b0:	8c7fffc4 	addi	r17,r17,-1

     buffer[index] = new_sample;

     j = index;
     for (i = 0; i < FILTER_ORDER; i++) {
         output += buffer[j] * coeffs[i];
   102b4:	00109f80 	call	109f8 <__mulsf3>
   102b8:	a009883a 	mov	r4,r20
   102bc:	100b883a 	mov	r5,r2
   102c0:	00105300 	call	10530 <__addsf3>
   102c4:	1029883a 	mov	r20,r2
         j--;
         if (j < 0)
   102c8:	8800010e 	bge	r17,zero,102d0 <fir_filter+0x94>
             j = FILTER_ORDER - 1;
   102cc:	04400c44 	movi	r17,49
   102d0:	94800104 	addi	r18,r18,4
     int i, j;

     buffer[index] = new_sample;

     j = index;
     for (i = 0; i < FILTER_ORDER; i++) {
   102d4:	957ff01e 	bne	r18,r21,10298 <__alt_data_end+0xffff0298>
         j--;
         if (j < 0)
             j = FILTER_ORDER - 1;
     }

     index++;
   102d8:	84000044 	addi	r16,r16,1
     if (index >= FILTER_ORDER)
   102dc:	00800c44 	movi	r2,49
   102e0:	14000216 	blt	r2,r16,102ec <fir_filter+0xb0>
         j--;
         if (j < 0)
             j = FILTER_ORDER - 1;
     }

     index++;
   102e4:	d4203115 	stw	r16,-32572(gp)
   102e8:	00000106 	br	102f0 <fir_filter+0xb4>
     if (index >= FILTER_ORDER)
         index = 0;
   102ec:	d0203115 	stw	zero,-32572(gp)

     return output;
 }
   102f0:	a005883a 	mov	r2,r20
   102f4:	dfc00717 	ldw	ra,28(sp)
   102f8:	dd800617 	ldw	r22,24(sp)
   102fc:	dd400517 	ldw	r21,20(sp)
   10300:	dd000417 	ldw	r20,16(sp)
   10304:	dcc00317 	ldw	r19,12(sp)
   10308:	dc800217 	ldw	r18,8(sp)
   1030c:	dc400117 	ldw	r17,4(sp)
   10310:	dc000017 	ldw	r16,0(sp)
   10314:	dec00804 	addi	sp,sp,32
   10318:	f800283a 	ret

0001031c <led_write>:
 alt_8 pwm = 0;
 alt_u8 led;
 int level;

 void led_write(alt_u8 led_pattern) {
     IOWR(LED_BASE, 0, led_pattern);
   1031c:	008000b4 	movhi	r2,2
   10320:	21003fcc 	andi	r4,r4,255
   10324:	10840804 	addi	r2,r2,4128
   10328:	11000035 	stwio	r4,0(r2)
   1032c:	f800283a 	ret

00010330 <convert_read>:
 }

 void convert_read(alt_32 acc_read, int *level, alt_u8 *led) {
     acc_read += OFFSET;
   10330:	213ff804 	addi	r4,r4,-32
     alt_u8 val = (acc_read >> 6) & 0x07;
     *led = (8 >> val) | (8 << (8 - val));
   10334:	2005d1ba 	srai	r2,r4,6
     *level = (acc_read >> 1) & 0x1f;
   10338:	2009d07a 	srai	r4,r4,1
 }

 void convert_read(alt_32 acc_read, int *level, alt_u8 *led) {
     acc_read += OFFSET;
     alt_u8 val = (acc_read >> 6) & 0x07;
     *led = (8 >> val) | (8 << (8 - val));
   1033c:	10c001cc 	andi	r3,r2,7
   10340:	00800204 	movi	r2,8
   10344:	10cfc83a 	sub	r7,r2,r3
   10348:	11ce983a 	sll	r7,r2,r7
   1034c:	10c5d83a 	sra	r2,r2,r3
     *level = (acc_read >> 1) & 0x1f;
   10350:	210007cc 	andi	r4,r4,31
 }

 void convert_read(alt_32 acc_read, int *level, alt_u8 *led) {
     acc_read += OFFSET;
     alt_u8 val = (acc_read >> 6) & 0x07;
     *led = (8 >> val) | (8 << (8 - val));
   10354:	3884b03a 	or	r2,r7,r2
   10358:	30800005 	stb	r2,0(r6)
     *level = (acc_read >> 1) & 0x1f;
   1035c:	29000015 	stw	r4,0(r5)
   10360:	f800283a 	ret

00010364 <timer_init>:
     else
         pwm++;
 }

 void timer_init(void* isr)
 {
   10364:	defffe04 	addi	sp,sp,-8
   10368:	dc000015 	stw	r16,0(sp)
     IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1036c:	040000b4 	movhi	r16,2
     else
         pwm++;
 }

 void timer_init(void* isr)
 {
   10370:	dfc00115 	stw	ra,4(sp)
     IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10374:	84040104 	addi	r16,r16,4100
   10378:	008000c4 	movi	r2,3
   1037c:	80800035 	stwio	r2,0(r16)
     IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10380:	00c000b4 	movhi	r3,2
   10384:	0005883a 	mov	r2,zero
   10388:	18c40004 	addi	r3,r3,4096
   1038c:	18800035 	stwio	r2,0(r3)
     IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   10390:	00c000b4 	movhi	r3,2
   10394:	18c40204 	addi	r3,r3,4104
   10398:	01424004 	movi	r5,2304
   1039c:	19400035 	stwio	r5,0(r3)
     IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   103a0:	00c000b4 	movhi	r3,2
   103a4:	18c40304 	addi	r3,r3,4108
   103a8:	18800035 	stwio	r2,0(r3)
     alt_irq_register(TIMER_IRQ, 0, isr);
   103ac:	200d883a 	mov	r6,r4
   103b0:	000b883a 	mov	r5,zero
   103b4:	01000044 	movi	r4,1
   103b8:	001119c0 	call	1119c <alt_irq_register>
     IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   103bc:	008001c4 	movi	r2,7
   103c0:	80800035 	stwio	r2,0(r16)
 }
   103c4:	dfc00117 	ldw	ra,4(sp)
   103c8:	dc000017 	ldw	r16,0(sp)
   103cc:	dec00204 	addi	sp,sp,8
   103d0:	f800283a 	ret

000103d4 <get_command_char>:

 int get_command_char(void)
 {
     int ch = alt_getchar();
   103d4:	00111581 	jmpi	11158 <alt_getchar>

000103d8 <main>:
     return ch;
 }

 int main(void)
 {
     alt_putstr("Duel Game\n");
   103d8:	01000074 	movhi	r4,1
         return -1;
     return ch;
 }

 int main(void)
 {
   103dc:	defffc04 	addi	sp,sp,-16
     alt_putstr("Duel Game\n");
   103e0:	21064104 	addi	r4,r4,6404
         return -1;
     return ch;
 }

 int main(void)
 {
   103e4:	dfc00315 	stw	ra,12(sp)
   103e8:	dc400215 	stw	r17,8(sp)
   103ec:	dc000115 	stw	r16,4(sp)
     alt_putstr("Duel Game\n");
   103f0:	00114f40 	call	114f4 <alt_putstr>
     alt_32 x_read;
     alt_u8 out;
     alt_up_accelerometer_spi_dev * acc_dev;
     acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   103f4:	01000074 	movhi	r4,1
   103f8:	21064404 	addi	r4,r4,6416
   103fc:	00115ec0 	call	115ec <alt_up_accelerometer_spi_open_dev>
     if (acc_dev == NULL) {
   10400:	1000051e 	bne	r2,zero,10418 <main+0x40>
         alt_putstr("Error: Could not open accelerometer device\n");
   10404:	01000074 	movhi	r4,1
   10408:	21064a04 	addi	r4,r4,6440
   1040c:	00114f40 	call	114f4 <alt_putstr>
         return 1;
   10410:	00800044 	movi	r2,1
   10414:	00004106 	br	1051c <main+0x144>
     }

     timer_init(sys_timer_isr);
   10418:	01000074 	movhi	r4,1
   1041c:	21006f04 	addi	r4,r4,444
   10420:	1023883a 	mov	r17,r2
   10424:	00103640 	call	10364 <timer_init>

     int mode = 1;
    //  alt_printf("Default mode: %d (2 = calibration, 1 = filtering, 0 = raw)\n", mode);
    alt_printf("Default mode: %d (1 = filtering, 0 = raw)\n", mode);
   10428:	01000074 	movhi	r4,1
   1042c:	01400044 	movi	r5,1
   10430:	21065504 	addi	r4,r4,6484
   10434:	001133c0 	call	1133c <alt_printf>
         return 1;
     }

     timer_init(sys_timer_isr);

     int mode = 1;
   10438:	04000044 	movi	r16,1
    //  alt_printf("Default mode: %d (2 = calibration, 1 = filtering, 0 = raw)\n", mode);
    alt_printf("Default mode: %d (1 = filtering, 0 = raw)\n", mode);

     while (1) {

        int cmd = get_command_char();
   1043c:	00103d40 	call	103d4 <get_command_char>
        if (cmd != -1) {
   10440:	00ffffc4 	movi	r3,-1
   10444:	10c01a26 	beq	r2,r3,104b0 <main+0xd8>
             if (cmd == '0') {
   10448:	00c00c04 	movi	r3,48
   1044c:	10c0051e 	bne	r2,r3,10464 <main+0x8c>
                 mode = 0;
                 alt_printf("Switched to Mode 0 (off).\n");
   10450:	01000074 	movhi	r4,1
   10454:	21066004 	addi	r4,r4,6528
   10458:	001133c0 	call	1133c <alt_printf>
   1045c:	0021883a 	mov	r16,zero
   10460:	003ff606 	br	1043c <__alt_data_end+0xffff043c>
             }
             else if (cmd == '1') {
   10464:	00c00c44 	movi	r3,49
   10468:	10c0041e 	bne	r2,r3,1047c <main+0xa4>
                 mode = 1;
                 alt_printf("Switched to Mode 1 (filtering).\n");
   1046c:	01000074 	movhi	r4,1
   10470:	21066704 	addi	r4,r4,6556
   10474:	001133c0 	call	1133c <alt_printf>
   10478:	00000e06 	br	104b4 <main+0xdc>
             }
            //  else if (cmd == '2') {
            //     mode = 2;
            //     alt_printf("Switched to Mode 2 (calibration).\n");
            // }
             else if (cmd == 'q' || cmd == 'Q') {
   1047c:	00fff7c4 	movi	r3,-33
   10480:	10c6703a 	and	r3,r2,r3
   10484:	01001444 	movi	r4,81
   10488:	1900051e 	bne	r3,r4,104a0 <main+0xc8>
                 alt_putstr("Exiting...\n");
   1048c:	01000074 	movhi	r4,1
   10490:	21067004 	addi	r4,r4,6592
   10494:	00114f40 	call	114f4 <alt_putstr>
            // }
        }

     }

     return 0;
   10498:	0005883a 	mov	r2,zero
   1049c:	00001f06 	br	1051c <main+0x144>
             else if (cmd == 'q' || cmd == 'Q') {
                 alt_putstr("Exiting...\n");
                 break;
             }
             else {
                 alt_printf("Unrecognized command: %c\n", cmd);
   104a0:	01000074 	movhi	r4,1
   104a4:	100b883a 	mov	r5,r2
   104a8:	21067304 	addi	r4,r4,6604
   104ac:	001133c0 	call	1133c <alt_printf>
             }
         }

        if (mode != 0) {
   104b0:	803fe226 	beq	r16,zero,1043c <__alt_data_end+0xffff043c>
            if (mode == 1) {
                alt_up_accelerometer_spi_read_x_axis(acc_dev, &x_read);
   104b4:	d80b883a 	mov	r5,sp
   104b8:	8809883a 	mov	r4,r17
   104bc:	00116440 	call	11644 <alt_up_accelerometer_spi_read_x_axis>
                alt_printf("Raw data: %x\n", x_read);
   104c0:	d9400017 	ldw	r5,0(sp)
   104c4:	01000074 	movhi	r4,1
   104c8:	21067a04 	addi	r4,r4,6632
   104cc:	001133c0 	call	1133c <alt_printf>

                float x_value = (float)x_read;
   104d0:	d9000017 	ldw	r4,0(sp)
   104d4:	0010e980 	call	10e98 <__floatsisf>
                float processed_value = x_value;

                processed_value = fir_filter(x_value);
   104d8:	1009883a 	mov	r4,r2
   104dc:	001023c0 	call	1023c <fir_filter>
                alt_printf("Filtered x: %.2f\n", processed_value);
   104e0:	1009883a 	mov	r4,r2
                alt_printf("Raw data: %x\n", x_read);

                float x_value = (float)x_read;
                float processed_value = x_value;

                processed_value = fir_filter(x_value);
   104e4:	1021883a 	mov	r16,r2
                alt_printf("Filtered x: %.2f\n", processed_value);
   104e8:	0010fbc0 	call	10fbc <__extendsfdf2>
   104ec:	01000074 	movhi	r4,1
   104f0:	180d883a 	mov	r6,r3
   104f4:	100b883a 	mov	r5,r2
   104f8:	21067e04 	addi	r4,r4,6648
   104fc:	001133c0 	call	1133c <alt_printf>

                convert_read((alt_32)processed_value, &level, &led);
   10500:	8009883a 	mov	r4,r16
   10504:	0010e280 	call	10e28 <__fixsfsi>
   10508:	d1a03304 	addi	r6,gp,-32564
   1050c:	d1603404 	addi	r5,gp,-32560
   10510:	1009883a 	mov	r4,r2
   10514:	00103300 	call	10330 <convert_read>
   10518:	003fc706 	br	10438 <__alt_data_end+0xffff0438>
        }

     }

     return 0;
 }
   1051c:	dfc00317 	ldw	ra,12(sp)
   10520:	dc400217 	ldw	r17,8(sp)
   10524:	dc000117 	ldw	r16,4(sp)
   10528:	dec00404 	addi	sp,sp,16
   1052c:	f800283a 	ret

00010530 <__addsf3>:
   10530:	defffc04 	addi	sp,sp,-16
   10534:	2004d7fa 	srli	r2,r4,31
   10538:	280cd5fa 	srli	r6,r5,23
   1053c:	dc000015 	stw	r16,0(sp)
   10540:	00c02034 	movhi	r3,128
   10544:	2020d5fa 	srli	r16,r4,23
   10548:	280ed7fa 	srli	r7,r5,31
   1054c:	18ffffc4 	addi	r3,r3,-1
   10550:	dc400115 	stw	r17,4(sp)
   10554:	1908703a 	and	r4,r3,r4
   10558:	194a703a 	and	r5,r3,r5
   1055c:	dfc00315 	stw	ra,12(sp)
   10560:	dc800215 	stw	r18,8(sp)
   10564:	14403fcc 	andi	r17,r2,255
   10568:	84003fcc 	andi	r16,r16,255
   1056c:	200890fa 	slli	r4,r4,3
   10570:	31803fcc 	andi	r6,r6,255
   10574:	280a90fa 	slli	r5,r5,3
   10578:	89c05026 	beq	r17,r7,106bc <__addsf3+0x18c>
   1057c:	8185c83a 	sub	r2,r16,r6
   10580:	00807a0e 	bge	zero,r2,1076c <__addsf3+0x23c>
   10584:	30001e1e 	bne	r6,zero,10600 <__addsf3+0xd0>
   10588:	28006d1e 	bne	r5,zero,10740 <__addsf3+0x210>
   1058c:	208001cc 	andi	r2,r4,7
   10590:	10000426 	beq	r2,zero,105a4 <__addsf3+0x74>
   10594:	208003cc 	andi	r2,r4,15
   10598:	00c00104 	movi	r3,4
   1059c:	10c00126 	beq	r2,r3,105a4 <__addsf3+0x74>
   105a0:	20c9883a 	add	r4,r4,r3
   105a4:	2081002c 	andhi	r2,r4,1024
   105a8:	10003926 	beq	r2,zero,10690 <__addsf3+0x160>
   105ac:	84000044 	addi	r16,r16,1
   105b0:	00803fc4 	movi	r2,255
   105b4:	80807826 	beq	r16,r2,10798 <__addsf3+0x268>
   105b8:	200891ba 	slli	r4,r4,6
   105bc:	8805883a 	mov	r2,r17
   105c0:	2008d27a 	srli	r4,r4,9
   105c4:	84003fcc 	andi	r16,r16,255
   105c8:	800695fa 	slli	r3,r16,23
   105cc:	10803fcc 	andi	r2,r2,255
   105d0:	04002034 	movhi	r16,128
   105d4:	843fffc4 	addi	r16,r16,-1
   105d8:	100497fa 	slli	r2,r2,31
   105dc:	2408703a 	and	r4,r4,r16
   105e0:	20e0b03a 	or	r16,r4,r3
   105e4:	8084b03a 	or	r2,r16,r2
   105e8:	dfc00317 	ldw	ra,12(sp)
   105ec:	dc800217 	ldw	r18,8(sp)
   105f0:	dc400117 	ldw	r17,4(sp)
   105f4:	dc000017 	ldw	r16,0(sp)
   105f8:	dec00404 	addi	sp,sp,16
   105fc:	f800283a 	ret
   10600:	00c03fc4 	movi	r3,255
   10604:	80ffe126 	beq	r16,r3,1058c <__alt_data_end+0xffff058c>
   10608:	29410034 	orhi	r5,r5,1024
   1060c:	00c006c4 	movi	r3,27
   10610:	18807516 	blt	r3,r2,107e8 <__addsf3+0x2b8>
   10614:	00c00804 	movi	r3,32
   10618:	1887c83a 	sub	r3,r3,r2
   1061c:	28c6983a 	sll	r3,r5,r3
   10620:	288ad83a 	srl	r5,r5,r2
   10624:	1804c03a 	cmpne	r2,r3,zero
   10628:	288ab03a 	or	r5,r5,r2
   1062c:	2149c83a 	sub	r4,r4,r5
   10630:	2081002c 	andhi	r2,r4,1024
   10634:	10001426 	beq	r2,zero,10688 <__addsf3+0x158>
   10638:	04810034 	movhi	r18,1024
   1063c:	94bfffc4 	addi	r18,r18,-1
   10640:	24a4703a 	and	r18,r4,r18
   10644:	9009883a 	mov	r4,r18
   10648:	00110cc0 	call	110cc <__clzsi2>
   1064c:	10bffec4 	addi	r2,r2,-5
   10650:	90a4983a 	sll	r18,r18,r2
   10654:	14005416 	blt	r2,r16,107a8 <__addsf3+0x278>
   10658:	1405c83a 	sub	r2,r2,r16
   1065c:	11000044 	addi	r4,r2,1
   10660:	00800804 	movi	r2,32
   10664:	1105c83a 	sub	r2,r2,r4
   10668:	9084983a 	sll	r2,r18,r2
   1066c:	9124d83a 	srl	r18,r18,r4
   10670:	0021883a 	mov	r16,zero
   10674:	1008c03a 	cmpne	r4,r2,zero
   10678:	9108b03a 	or	r4,r18,r4
   1067c:	003fc306 	br	1058c <__alt_data_end+0xffff058c>
   10680:	1000db26 	beq	r2,zero,109f0 <__addsf3+0x4c0>
   10684:	1009883a 	mov	r4,r2
   10688:	208001cc 	andi	r2,r4,7
   1068c:	103fc11e 	bne	r2,zero,10594 <__alt_data_end+0xffff0594>
   10690:	2006d0fa 	srli	r3,r4,3
   10694:	01003fc4 	movi	r4,255
   10698:	8805883a 	mov	r2,r17
   1069c:	8100241e 	bne	r16,r4,10730 <__addsf3+0x200>
   106a0:	18006e26 	beq	r3,zero,1085c <__addsf3+0x32c>
   106a4:	19001034 	orhi	r4,r3,64
   106a8:	00c02034 	movhi	r3,128
   106ac:	18ffffc4 	addi	r3,r3,-1
   106b0:	043fffc4 	movi	r16,-1
   106b4:	20c8703a 	and	r4,r4,r3
   106b8:	003fc206 	br	105c4 <__alt_data_end+0xffff05c4>
   106bc:	8187c83a 	sub	r3,r16,r6
   106c0:	00c03e0e 	bge	zero,r3,107bc <__addsf3+0x28c>
   106c4:	30002326 	beq	r6,zero,10754 <__addsf3+0x224>
   106c8:	01803fc4 	movi	r6,255
   106cc:	81bfaf26 	beq	r16,r6,1058c <__alt_data_end+0xffff058c>
   106d0:	29410034 	orhi	r5,r5,1024
   106d4:	018006c4 	movi	r6,27
   106d8:	30c07416 	blt	r6,r3,108ac <__addsf3+0x37c>
   106dc:	01800804 	movi	r6,32
   106e0:	30cdc83a 	sub	r6,r6,r3
   106e4:	298c983a 	sll	r6,r5,r6
   106e8:	28cad83a 	srl	r5,r5,r3
   106ec:	3006c03a 	cmpne	r3,r6,zero
   106f0:	28cab03a 	or	r5,r5,r3
   106f4:	2149883a 	add	r4,r4,r5
   106f8:	20c1002c 	andhi	r3,r4,1024
   106fc:	183fe226 	beq	r3,zero,10688 <__alt_data_end+0xffff0688>
   10700:	84000044 	addi	r16,r16,1
   10704:	00c03fc4 	movi	r3,255
   10708:	80c05426 	beq	r16,r3,1085c <__addsf3+0x32c>
   1070c:	00bf0034 	movhi	r2,64512
   10710:	10bfffc4 	addi	r2,r2,-1
   10714:	20c0004c 	andi	r3,r4,1
   10718:	2088703a 	and	r4,r4,r2
   1071c:	2008d07a 	srli	r4,r4,1
   10720:	20c8b03a 	or	r4,r4,r3
   10724:	003f9906 	br	1058c <__alt_data_end+0xffff058c>
   10728:	0007883a 	mov	r3,zero
   1072c:	0005883a 	mov	r2,zero
   10730:	01002034 	movhi	r4,128
   10734:	213fffc4 	addi	r4,r4,-1
   10738:	1908703a 	and	r4,r3,r4
   1073c:	003fa106 	br	105c4 <__alt_data_end+0xffff05c4>
   10740:	10bfffc4 	addi	r2,r2,-1
   10744:	103fb926 	beq	r2,zero,1062c <__alt_data_end+0xffff062c>
   10748:	00c03fc4 	movi	r3,255
   1074c:	80ffaf1e 	bne	r16,r3,1060c <__alt_data_end+0xffff060c>
   10750:	003f8e06 	br	1058c <__alt_data_end+0xffff058c>
   10754:	283f8d26 	beq	r5,zero,1058c <__alt_data_end+0xffff058c>
   10758:	18ffffc4 	addi	r3,r3,-1
   1075c:	183fe526 	beq	r3,zero,106f4 <__alt_data_end+0xffff06f4>
   10760:	01803fc4 	movi	r6,255
   10764:	81bfdb1e 	bne	r16,r6,106d4 <__alt_data_end+0xffff06d4>
   10768:	003f8806 	br	1058c <__alt_data_end+0xffff058c>
   1076c:	1000201e 	bne	r2,zero,107f0 <__addsf3+0x2c0>
   10770:	80800044 	addi	r2,r16,1
   10774:	10803fcc 	andi	r2,r2,255
   10778:	01800044 	movi	r6,1
   1077c:	3080450e 	bge	r6,r2,10894 <__addsf3+0x364>
   10780:	2165c83a 	sub	r18,r4,r5
   10784:	90c1002c 	andhi	r3,r18,1024
   10788:	18002b26 	beq	r3,zero,10838 <__addsf3+0x308>
   1078c:	2925c83a 	sub	r18,r5,r4
   10790:	3823883a 	mov	r17,r7
   10794:	003fab06 	br	10644 <__alt_data_end+0xffff0644>
   10798:	8805883a 	mov	r2,r17
   1079c:	043fffc4 	movi	r16,-1
   107a0:	0009883a 	mov	r4,zero
   107a4:	003f8706 	br	105c4 <__alt_data_end+0xffff05c4>
   107a8:	013f0034 	movhi	r4,64512
   107ac:	213fffc4 	addi	r4,r4,-1
   107b0:	80a1c83a 	sub	r16,r16,r2
   107b4:	9108703a 	and	r4,r18,r4
   107b8:	003f7406 	br	1058c <__alt_data_end+0xffff058c>
   107bc:	1800411e 	bne	r3,zero,108c4 <__addsf3+0x394>
   107c0:	80c00044 	addi	r3,r16,1
   107c4:	19c03fcc 	andi	r7,r3,255
   107c8:	01800044 	movi	r6,1
   107cc:	31c0260e 	bge	r6,r7,10868 <__addsf3+0x338>
   107d0:	01803fc4 	movi	r6,255
   107d4:	19802126 	beq	r3,r6,1085c <__addsf3+0x32c>
   107d8:	2149883a 	add	r4,r4,r5
   107dc:	2008d07a 	srli	r4,r4,1
   107e0:	1821883a 	mov	r16,r3
   107e4:	003f6906 	br	1058c <__alt_data_end+0xffff058c>
   107e8:	01400044 	movi	r5,1
   107ec:	003f8f06 	br	1062c <__alt_data_end+0xffff062c>
   107f0:	8000151e 	bne	r16,zero,10848 <__addsf3+0x318>
   107f4:	20002f26 	beq	r4,zero,108b4 <__addsf3+0x384>
   107f8:	0084303a 	nor	r2,zero,r2
   107fc:	10000a26 	beq	r2,zero,10828 <__addsf3+0x2f8>
   10800:	00c03fc4 	movi	r3,255
   10804:	30c02b26 	beq	r6,r3,108b4 <__addsf3+0x384>
   10808:	00c006c4 	movi	r3,27
   1080c:	18806d16 	blt	r3,r2,109c4 <__addsf3+0x494>
   10810:	00c00804 	movi	r3,32
   10814:	1887c83a 	sub	r3,r3,r2
   10818:	20c6983a 	sll	r3,r4,r3
   1081c:	2084d83a 	srl	r2,r4,r2
   10820:	1808c03a 	cmpne	r4,r3,zero
   10824:	1108b03a 	or	r4,r2,r4
   10828:	2909c83a 	sub	r4,r5,r4
   1082c:	3021883a 	mov	r16,r6
   10830:	3823883a 	mov	r17,r7
   10834:	003f7e06 	br	10630 <__alt_data_end+0xffff0630>
   10838:	903f821e 	bne	r18,zero,10644 <__alt_data_end+0xffff0644>
   1083c:	0005883a 	mov	r2,zero
   10840:	0021883a 	mov	r16,zero
   10844:	003fba06 	br	10730 <__alt_data_end+0xffff0730>
   10848:	00c03fc4 	movi	r3,255
   1084c:	30c01926 	beq	r6,r3,108b4 <__addsf3+0x384>
   10850:	0085c83a 	sub	r2,zero,r2
   10854:	21010034 	orhi	r4,r4,1024
   10858:	003feb06 	br	10808 <__alt_data_end+0xffff0808>
   1085c:	043fffc4 	movi	r16,-1
   10860:	0009883a 	mov	r4,zero
   10864:	003f5706 	br	105c4 <__alt_data_end+0xffff05c4>
   10868:	80004a1e 	bne	r16,zero,10994 <__addsf3+0x464>
   1086c:	20005926 	beq	r4,zero,109d4 <__addsf3+0x4a4>
   10870:	283f4626 	beq	r5,zero,1058c <__alt_data_end+0xffff058c>
   10874:	2149883a 	add	r4,r4,r5
   10878:	2081002c 	andhi	r2,r4,1024
   1087c:	103f8226 	beq	r2,zero,10688 <__alt_data_end+0xffff0688>
   10880:	00bf0034 	movhi	r2,64512
   10884:	10bfffc4 	addi	r2,r2,-1
   10888:	3021883a 	mov	r16,r6
   1088c:	2088703a 	and	r4,r4,r2
   10890:	003f3e06 	br	1058c <__alt_data_end+0xffff058c>
   10894:	8000121e 	bne	r16,zero,108e0 <__addsf3+0x3b0>
   10898:	2000261e 	bne	r4,zero,10934 <__addsf3+0x404>
   1089c:	283fa226 	beq	r5,zero,10728 <__alt_data_end+0xffff0728>
   108a0:	2809883a 	mov	r4,r5
   108a4:	3823883a 	mov	r17,r7
   108a8:	003f3806 	br	1058c <__alt_data_end+0xffff058c>
   108ac:	01400044 	movi	r5,1
   108b0:	003f9006 	br	106f4 <__alt_data_end+0xffff06f4>
   108b4:	2809883a 	mov	r4,r5
   108b8:	3021883a 	mov	r16,r6
   108bc:	3823883a 	mov	r17,r7
   108c0:	003f3206 	br	1058c <__alt_data_end+0xffff058c>
   108c4:	80000c1e 	bne	r16,zero,108f8 <__addsf3+0x3c8>
   108c8:	20002f26 	beq	r4,zero,10988 <__addsf3+0x458>
   108cc:	00c6303a 	nor	r3,zero,r3
   108d0:	18002b1e 	bne	r3,zero,10980 <__addsf3+0x450>
   108d4:	2149883a 	add	r4,r4,r5
   108d8:	3021883a 	mov	r16,r6
   108dc:	003f8606 	br	106f8 <__alt_data_end+0xffff06f8>
   108e0:	20001b1e 	bne	r4,zero,10950 <__addsf3+0x420>
   108e4:	28003926 	beq	r5,zero,109cc <__addsf3+0x49c>
   108e8:	2809883a 	mov	r4,r5
   108ec:	3823883a 	mov	r17,r7
   108f0:	04003fc4 	movi	r16,255
   108f4:	003f2506 	br	1058c <__alt_data_end+0xffff058c>
   108f8:	01c03fc4 	movi	r7,255
   108fc:	31c02226 	beq	r6,r7,10988 <__addsf3+0x458>
   10900:	00c7c83a 	sub	r3,zero,r3
   10904:	21010034 	orhi	r4,r4,1024
   10908:	01c006c4 	movi	r7,27
   1090c:	38c03616 	blt	r7,r3,109e8 <__addsf3+0x4b8>
   10910:	01c00804 	movi	r7,32
   10914:	38cfc83a 	sub	r7,r7,r3
   10918:	21ce983a 	sll	r7,r4,r7
   1091c:	20c6d83a 	srl	r3,r4,r3
   10920:	3808c03a 	cmpne	r4,r7,zero
   10924:	1906b03a 	or	r3,r3,r4
   10928:	1949883a 	add	r4,r3,r5
   1092c:	3021883a 	mov	r16,r6
   10930:	003f7106 	br	106f8 <__alt_data_end+0xffff06f8>
   10934:	283f1526 	beq	r5,zero,1058c <__alt_data_end+0xffff058c>
   10938:	2145c83a 	sub	r2,r4,r5
   1093c:	10c1002c 	andhi	r3,r2,1024
   10940:	183f4f26 	beq	r3,zero,10680 <__alt_data_end+0xffff0680>
   10944:	2909c83a 	sub	r4,r5,r4
   10948:	3823883a 	mov	r17,r7
   1094c:	003f0f06 	br	1058c <__alt_data_end+0xffff058c>
   10950:	28001a26 	beq	r5,zero,109bc <__addsf3+0x48c>
   10954:	2008d0fa 	srli	r4,r4,3
   10958:	2080102c 	andhi	r2,r4,64
   1095c:	10000526 	beq	r2,zero,10974 <__addsf3+0x444>
   10960:	280ad0fa 	srli	r5,r5,3
   10964:	2880102c 	andhi	r2,r5,64
   10968:	1000021e 	bne	r2,zero,10974 <__addsf3+0x444>
   1096c:	2809883a 	mov	r4,r5
   10970:	3823883a 	mov	r17,r7
   10974:	200890fa 	slli	r4,r4,3
   10978:	04003fc4 	movi	r16,255
   1097c:	003f0306 	br	1058c <__alt_data_end+0xffff058c>
   10980:	01c03fc4 	movi	r7,255
   10984:	31ffe01e 	bne	r6,r7,10908 <__alt_data_end+0xffff0908>
   10988:	2809883a 	mov	r4,r5
   1098c:	3021883a 	mov	r16,r6
   10990:	003efe06 	br	1058c <__alt_data_end+0xffff058c>
   10994:	20001126 	beq	r4,zero,109dc <__addsf3+0x4ac>
   10998:	28000826 	beq	r5,zero,109bc <__addsf3+0x48c>
   1099c:	2008d0fa 	srli	r4,r4,3
   109a0:	2080102c 	andhi	r2,r4,64
   109a4:	103ff326 	beq	r2,zero,10974 <__alt_data_end+0xffff0974>
   109a8:	280ad0fa 	srli	r5,r5,3
   109ac:	2880102c 	andhi	r2,r5,64
   109b0:	103ff01e 	bne	r2,zero,10974 <__alt_data_end+0xffff0974>
   109b4:	2809883a 	mov	r4,r5
   109b8:	003fee06 	br	10974 <__alt_data_end+0xffff0974>
   109bc:	04003fc4 	movi	r16,255
   109c0:	003ef206 	br	1058c <__alt_data_end+0xffff058c>
   109c4:	01000044 	movi	r4,1
   109c8:	003f9706 	br	10828 <__alt_data_end+0xffff0828>
   109cc:	0005883a 	mov	r2,zero
   109d0:	003f3406 	br	106a4 <__alt_data_end+0xffff06a4>
   109d4:	2809883a 	mov	r4,r5
   109d8:	003eec06 	br	1058c <__alt_data_end+0xffff058c>
   109dc:	2809883a 	mov	r4,r5
   109e0:	04003fc4 	movi	r16,255
   109e4:	003ee906 	br	1058c <__alt_data_end+0xffff058c>
   109e8:	00c00044 	movi	r3,1
   109ec:	003fce06 	br	10928 <__alt_data_end+0xffff0928>
   109f0:	0005883a 	mov	r2,zero
   109f4:	003f4e06 	br	10730 <__alt_data_end+0xffff0730>

000109f8 <__mulsf3>:
   109f8:	defff504 	addi	sp,sp,-44
   109fc:	dc000115 	stw	r16,4(sp)
   10a00:	2020d5fa 	srli	r16,r4,23
   10a04:	dd400615 	stw	r21,24(sp)
   10a08:	202ad7fa 	srli	r21,r4,31
   10a0c:	dc800315 	stw	r18,12(sp)
   10a10:	04802034 	movhi	r18,128
   10a14:	df000915 	stw	fp,36(sp)
   10a18:	dd000515 	stw	r20,20(sp)
   10a1c:	94bfffc4 	addi	r18,r18,-1
   10a20:	dfc00a15 	stw	ra,40(sp)
   10a24:	ddc00815 	stw	r23,32(sp)
   10a28:	dd800715 	stw	r22,28(sp)
   10a2c:	dcc00415 	stw	r19,16(sp)
   10a30:	dc400215 	stw	r17,8(sp)
   10a34:	84003fcc 	andi	r16,r16,255
   10a38:	9124703a 	and	r18,r18,r4
   10a3c:	a829883a 	mov	r20,r21
   10a40:	af003fcc 	andi	fp,r21,255
   10a44:	80005426 	beq	r16,zero,10b98 <__mulsf3+0x1a0>
   10a48:	00803fc4 	movi	r2,255
   10a4c:	80802f26 	beq	r16,r2,10b0c <__mulsf3+0x114>
   10a50:	91002034 	orhi	r4,r18,128
   10a54:	202490fa 	slli	r18,r4,3
   10a58:	843fe044 	addi	r16,r16,-127
   10a5c:	0023883a 	mov	r17,zero
   10a60:	002f883a 	mov	r23,zero
   10a64:	2804d5fa 	srli	r2,r5,23
   10a68:	282cd7fa 	srli	r22,r5,31
   10a6c:	01002034 	movhi	r4,128
   10a70:	213fffc4 	addi	r4,r4,-1
   10a74:	10803fcc 	andi	r2,r2,255
   10a78:	2166703a 	and	r19,r4,r5
   10a7c:	b1803fcc 	andi	r6,r22,255
   10a80:	10004c26 	beq	r2,zero,10bb4 <__mulsf3+0x1bc>
   10a84:	00c03fc4 	movi	r3,255
   10a88:	10c04726 	beq	r2,r3,10ba8 <__mulsf3+0x1b0>
   10a8c:	99002034 	orhi	r4,r19,128
   10a90:	202690fa 	slli	r19,r4,3
   10a94:	10bfe044 	addi	r2,r2,-127
   10a98:	0007883a 	mov	r3,zero
   10a9c:	80a1883a 	add	r16,r16,r2
   10aa0:	010003c4 	movi	r4,15
   10aa4:	1c44b03a 	or	r2,r3,r17
   10aa8:	b56af03a 	xor	r21,r22,r21
   10aac:	81c00044 	addi	r7,r16,1
   10ab0:	20806b36 	bltu	r4,r2,10c60 <__mulsf3+0x268>
   10ab4:	100490ba 	slli	r2,r2,2
   10ab8:	01000074 	movhi	r4,1
   10abc:	2102b304 	addi	r4,r4,2764
   10ac0:	1105883a 	add	r2,r2,r4
   10ac4:	10800017 	ldw	r2,0(r2)
   10ac8:	1000683a 	jmp	r2
   10acc:	00010c60 	cmpeqi	zero,zero,1073
   10ad0:	00010b20 	cmpeqi	zero,zero,1068
   10ad4:	00010b20 	cmpeqi	zero,zero,1068
   10ad8:	00010b1c 	xori	zero,zero,1068
   10adc:	00010c44 	movi	zero,1073
   10ae0:	00010c44 	movi	zero,1073
   10ae4:	00010c30 	cmpltui	zero,zero,1072
   10ae8:	00010b1c 	xori	zero,zero,1068
   10aec:	00010c44 	movi	zero,1073
   10af0:	00010c30 	cmpltui	zero,zero,1072
   10af4:	00010c44 	movi	zero,1073
   10af8:	00010b1c 	xori	zero,zero,1068
   10afc:	00010c50 	cmplti	zero,zero,1073
   10b00:	00010c50 	cmplti	zero,zero,1073
   10b04:	00010c50 	cmplti	zero,zero,1073
   10b08:	00010d60 	cmpeqi	zero,zero,1077
   10b0c:	90003b1e 	bne	r18,zero,10bfc <__mulsf3+0x204>
   10b10:	04400204 	movi	r17,8
   10b14:	05c00084 	movi	r23,2
   10b18:	003fd206 	br	10a64 <__alt_data_end+0xffff0a64>
   10b1c:	302b883a 	mov	r21,r6
   10b20:	00800084 	movi	r2,2
   10b24:	18802626 	beq	r3,r2,10bc0 <__mulsf3+0x1c8>
   10b28:	008000c4 	movi	r2,3
   10b2c:	1880b826 	beq	r3,r2,10e10 <__mulsf3+0x418>
   10b30:	00800044 	movi	r2,1
   10b34:	1880af1e 	bne	r3,r2,10df4 <__mulsf3+0x3fc>
   10b38:	a829883a 	mov	r20,r21
   10b3c:	0007883a 	mov	r3,zero
   10b40:	0009883a 	mov	r4,zero
   10b44:	18803fcc 	andi	r2,r3,255
   10b48:	100695fa 	slli	r3,r2,23
   10b4c:	a0803fcc 	andi	r2,r20,255
   10b50:	100a97fa 	slli	r5,r2,31
   10b54:	00802034 	movhi	r2,128
   10b58:	10bfffc4 	addi	r2,r2,-1
   10b5c:	2084703a 	and	r2,r4,r2
   10b60:	10c4b03a 	or	r2,r2,r3
   10b64:	1144b03a 	or	r2,r2,r5
   10b68:	dfc00a17 	ldw	ra,40(sp)
   10b6c:	df000917 	ldw	fp,36(sp)
   10b70:	ddc00817 	ldw	r23,32(sp)
   10b74:	dd800717 	ldw	r22,28(sp)
   10b78:	dd400617 	ldw	r21,24(sp)
   10b7c:	dd000517 	ldw	r20,20(sp)
   10b80:	dcc00417 	ldw	r19,16(sp)
   10b84:	dc800317 	ldw	r18,12(sp)
   10b88:	dc400217 	ldw	r17,8(sp)
   10b8c:	dc000117 	ldw	r16,4(sp)
   10b90:	dec00b04 	addi	sp,sp,44
   10b94:	f800283a 	ret
   10b98:	90000d1e 	bne	r18,zero,10bd0 <__mulsf3+0x1d8>
   10b9c:	04400104 	movi	r17,4
   10ba0:	05c00044 	movi	r23,1
   10ba4:	003faf06 	br	10a64 <__alt_data_end+0xffff0a64>
   10ba8:	9806c03a 	cmpne	r3,r19,zero
   10bac:	18c00084 	addi	r3,r3,2
   10bb0:	003fba06 	br	10a9c <__alt_data_end+0xffff0a9c>
   10bb4:	9800141e 	bne	r19,zero,10c08 <__mulsf3+0x210>
   10bb8:	00c00044 	movi	r3,1
   10bbc:	003fb706 	br	10a9c <__alt_data_end+0xffff0a9c>
   10bc0:	a829883a 	mov	r20,r21
   10bc4:	00ffffc4 	movi	r3,-1
   10bc8:	0009883a 	mov	r4,zero
   10bcc:	003fdd06 	br	10b44 <__alt_data_end+0xffff0b44>
   10bd0:	9009883a 	mov	r4,r18
   10bd4:	d9400015 	stw	r5,0(sp)
   10bd8:	00110cc0 	call	110cc <__clzsi2>
   10bdc:	10fffec4 	addi	r3,r2,-5
   10be0:	10801d84 	addi	r2,r2,118
   10be4:	90e4983a 	sll	r18,r18,r3
   10be8:	00a1c83a 	sub	r16,zero,r2
   10bec:	0023883a 	mov	r17,zero
   10bf0:	002f883a 	mov	r23,zero
   10bf4:	d9400017 	ldw	r5,0(sp)
   10bf8:	003f9a06 	br	10a64 <__alt_data_end+0xffff0a64>
   10bfc:	04400304 	movi	r17,12
   10c00:	05c000c4 	movi	r23,3
   10c04:	003f9706 	br	10a64 <__alt_data_end+0xffff0a64>
   10c08:	9809883a 	mov	r4,r19
   10c0c:	d9800015 	stw	r6,0(sp)
   10c10:	00110cc0 	call	110cc <__clzsi2>
   10c14:	10fffec4 	addi	r3,r2,-5
   10c18:	10801d84 	addi	r2,r2,118
   10c1c:	98e6983a 	sll	r19,r19,r3
   10c20:	0085c83a 	sub	r2,zero,r2
   10c24:	0007883a 	mov	r3,zero
   10c28:	d9800017 	ldw	r6,0(sp)
   10c2c:	003f9b06 	br	10a9c <__alt_data_end+0xffff0a9c>
   10c30:	01002034 	movhi	r4,128
   10c34:	0029883a 	mov	r20,zero
   10c38:	213fffc4 	addi	r4,r4,-1
   10c3c:	00ffffc4 	movi	r3,-1
   10c40:	003fc006 	br	10b44 <__alt_data_end+0xffff0b44>
   10c44:	9027883a 	mov	r19,r18
   10c48:	b807883a 	mov	r3,r23
   10c4c:	003fb406 	br	10b20 <__alt_data_end+0xffff0b20>
   10c50:	9027883a 	mov	r19,r18
   10c54:	e02b883a 	mov	r21,fp
   10c58:	b807883a 	mov	r3,r23
   10c5c:	003fb006 	br	10b20 <__alt_data_end+0xffff0b20>
   10c60:	9028d43a 	srli	r20,r18,16
   10c64:	982cd43a 	srli	r22,r19,16
   10c68:	94bfffcc 	andi	r18,r18,65535
   10c6c:	9cffffcc 	andi	r19,r19,65535
   10c70:	980b883a 	mov	r5,r19
   10c74:	9009883a 	mov	r4,r18
   10c78:	d9c00015 	stw	r7,0(sp)
   10c7c:	00111300 	call	11130 <__mulsi3>
   10c80:	a00b883a 	mov	r5,r20
   10c84:	9809883a 	mov	r4,r19
   10c88:	1023883a 	mov	r17,r2
   10c8c:	00111300 	call	11130 <__mulsi3>
   10c90:	a009883a 	mov	r4,r20
   10c94:	b00b883a 	mov	r5,r22
   10c98:	1027883a 	mov	r19,r2
   10c9c:	00111300 	call	11130 <__mulsi3>
   10ca0:	b00b883a 	mov	r5,r22
   10ca4:	9009883a 	mov	r4,r18
   10ca8:	1029883a 	mov	r20,r2
   10cac:	00111300 	call	11130 <__mulsi3>
   10cb0:	8806d43a 	srli	r3,r17,16
   10cb4:	14c5883a 	add	r2,r2,r19
   10cb8:	d9c00017 	ldw	r7,0(sp)
   10cbc:	1885883a 	add	r2,r3,r2
   10cc0:	14c0022e 	bgeu	r2,r19,10ccc <__mulsf3+0x2d4>
   10cc4:	00c00074 	movhi	r3,1
   10cc8:	a0e9883a 	add	r20,r20,r3
   10ccc:	1026943a 	slli	r19,r2,16
   10cd0:	8c7fffcc 	andi	r17,r17,65535
   10cd4:	1004d43a 	srli	r2,r2,16
   10cd8:	9c63883a 	add	r17,r19,r17
   10cdc:	882691ba 	slli	r19,r17,6
   10ce0:	1505883a 	add	r2,r2,r20
   10ce4:	8822d6ba 	srli	r17,r17,26
   10ce8:	100891ba 	slli	r4,r2,6
   10cec:	9826c03a 	cmpne	r19,r19,zero
   10cf0:	9c62b03a 	or	r17,r19,r17
   10cf4:	8926b03a 	or	r19,r17,r4
   10cf8:	9882002c 	andhi	r2,r19,2048
   10cfc:	10000426 	beq	r2,zero,10d10 <__mulsf3+0x318>
   10d00:	9804d07a 	srli	r2,r19,1
   10d04:	9900004c 	andi	r4,r19,1
   10d08:	3821883a 	mov	r16,r7
   10d0c:	1126b03a 	or	r19,r2,r4
   10d10:	80c01fc4 	addi	r3,r16,127
   10d14:	00c0210e 	bge	zero,r3,10d9c <__mulsf3+0x3a4>
   10d18:	988001cc 	andi	r2,r19,7
   10d1c:	10000426 	beq	r2,zero,10d30 <__mulsf3+0x338>
   10d20:	988003cc 	andi	r2,r19,15
   10d24:	01000104 	movi	r4,4
   10d28:	11000126 	beq	r2,r4,10d30 <__mulsf3+0x338>
   10d2c:	9927883a 	add	r19,r19,r4
   10d30:	9882002c 	andhi	r2,r19,2048
   10d34:	10000426 	beq	r2,zero,10d48 <__mulsf3+0x350>
   10d38:	00be0034 	movhi	r2,63488
   10d3c:	10bfffc4 	addi	r2,r2,-1
   10d40:	80c02004 	addi	r3,r16,128
   10d44:	98a6703a 	and	r19,r19,r2
   10d48:	00803f84 	movi	r2,254
   10d4c:	10ff9c16 	blt	r2,r3,10bc0 <__alt_data_end+0xffff0bc0>
   10d50:	980891ba 	slli	r4,r19,6
   10d54:	a829883a 	mov	r20,r21
   10d58:	2008d27a 	srli	r4,r4,9
   10d5c:	003f7906 	br	10b44 <__alt_data_end+0xffff0b44>
   10d60:	9080102c 	andhi	r2,r18,64
   10d64:	10000826 	beq	r2,zero,10d88 <__mulsf3+0x390>
   10d68:	9880102c 	andhi	r2,r19,64
   10d6c:	1000061e 	bne	r2,zero,10d88 <__mulsf3+0x390>
   10d70:	00802034 	movhi	r2,128
   10d74:	99001034 	orhi	r4,r19,64
   10d78:	10bfffc4 	addi	r2,r2,-1
   10d7c:	b029883a 	mov	r20,r22
   10d80:	2088703a 	and	r4,r4,r2
   10d84:	003fad06 	br	10c3c <__alt_data_end+0xffff0c3c>
   10d88:	00802034 	movhi	r2,128
   10d8c:	91001034 	orhi	r4,r18,64
   10d90:	10bfffc4 	addi	r2,r2,-1
   10d94:	2088703a 	and	r4,r4,r2
   10d98:	003fa806 	br	10c3c <__alt_data_end+0xffff0c3c>
   10d9c:	00800044 	movi	r2,1
   10da0:	10c7c83a 	sub	r3,r2,r3
   10da4:	008006c4 	movi	r2,27
   10da8:	10ff6316 	blt	r2,r3,10b38 <__alt_data_end+0xffff0b38>
   10dac:	00800804 	movi	r2,32
   10db0:	10c5c83a 	sub	r2,r2,r3
   10db4:	9884983a 	sll	r2,r19,r2
   10db8:	98c6d83a 	srl	r3,r19,r3
   10dbc:	1004c03a 	cmpne	r2,r2,zero
   10dc0:	1884b03a 	or	r2,r3,r2
   10dc4:	10c001cc 	andi	r3,r2,7
   10dc8:	18000426 	beq	r3,zero,10ddc <__mulsf3+0x3e4>
   10dcc:	10c003cc 	andi	r3,r2,15
   10dd0:	01000104 	movi	r4,4
   10dd4:	19000126 	beq	r3,r4,10ddc <__mulsf3+0x3e4>
   10dd8:	1105883a 	add	r2,r2,r4
   10ddc:	10c1002c 	andhi	r3,r2,1024
   10de0:	18000626 	beq	r3,zero,10dfc <__mulsf3+0x404>
   10de4:	a829883a 	mov	r20,r21
   10de8:	00c00044 	movi	r3,1
   10dec:	0009883a 	mov	r4,zero
   10df0:	003f5406 	br	10b44 <__alt_data_end+0xffff0b44>
   10df4:	3821883a 	mov	r16,r7
   10df8:	003fc506 	br	10d10 <__alt_data_end+0xffff0d10>
   10dfc:	100491ba 	slli	r2,r2,6
   10e00:	a829883a 	mov	r20,r21
   10e04:	0007883a 	mov	r3,zero
   10e08:	1008d27a 	srli	r4,r2,9
   10e0c:	003f4d06 	br	10b44 <__alt_data_end+0xffff0b44>
   10e10:	00802034 	movhi	r2,128
   10e14:	99001034 	orhi	r4,r19,64
   10e18:	10bfffc4 	addi	r2,r2,-1
   10e1c:	a829883a 	mov	r20,r21
   10e20:	2088703a 	and	r4,r4,r2
   10e24:	003f8506 	br	10c3c <__alt_data_end+0xffff0c3c>

00010e28 <__fixsfsi>:
   10e28:	200ad5fa 	srli	r5,r4,23
   10e2c:	00c02034 	movhi	r3,128
   10e30:	18ffffc4 	addi	r3,r3,-1
   10e34:	29403fcc 	andi	r5,r5,255
   10e38:	00801f84 	movi	r2,126
   10e3c:	1906703a 	and	r3,r3,r4
   10e40:	2008d7fa 	srli	r4,r4,31
   10e44:	11400e0e 	bge	r2,r5,10e80 <__fixsfsi+0x58>
   10e48:	00802744 	movi	r2,157
   10e4c:	11400816 	blt	r2,r5,10e70 <__fixsfsi+0x48>
   10e50:	00802544 	movi	r2,149
   10e54:	18c02034 	orhi	r3,r3,128
   10e58:	11400b0e 	bge	r2,r5,10e88 <__fixsfsi+0x60>
   10e5c:	28bfda84 	addi	r2,r5,-150
   10e60:	1884983a 	sll	r2,r3,r2
   10e64:	20000726 	beq	r4,zero,10e84 <__fixsfsi+0x5c>
   10e68:	0085c83a 	sub	r2,zero,r2
   10e6c:	f800283a 	ret
   10e70:	00a00034 	movhi	r2,32768
   10e74:	10bfffc4 	addi	r2,r2,-1
   10e78:	2085883a 	add	r2,r4,r2
   10e7c:	f800283a 	ret
   10e80:	0005883a 	mov	r2,zero
   10e84:	f800283a 	ret
   10e88:	00802584 	movi	r2,150
   10e8c:	1145c83a 	sub	r2,r2,r5
   10e90:	1884d83a 	srl	r2,r3,r2
   10e94:	003ff306 	br	10e64 <__alt_data_end+0xffff0e64>

00010e98 <__floatsisf>:
   10e98:	defffd04 	addi	sp,sp,-12
   10e9c:	dfc00215 	stw	ra,8(sp)
   10ea0:	dc400115 	stw	r17,4(sp)
   10ea4:	dc000015 	stw	r16,0(sp)
   10ea8:	20003526 	beq	r4,zero,10f80 <__floatsisf+0xe8>
   10eac:	2021883a 	mov	r16,r4
   10eb0:	2022d7fa 	srli	r17,r4,31
   10eb4:	20003616 	blt	r4,zero,10f90 <__floatsisf+0xf8>
   10eb8:	8009883a 	mov	r4,r16
   10ebc:	00110cc0 	call	110cc <__clzsi2>
   10ec0:	00c02784 	movi	r3,158
   10ec4:	1887c83a 	sub	r3,r3,r2
   10ec8:	01002584 	movi	r4,150
   10ecc:	20c01416 	blt	r4,r3,10f20 <__floatsisf+0x88>
   10ed0:	20c9c83a 	sub	r4,r4,r3
   10ed4:	8120983a 	sll	r16,r16,r4
   10ed8:	00802034 	movhi	r2,128
   10edc:	10bfffc4 	addi	r2,r2,-1
   10ee0:	8809883a 	mov	r4,r17
   10ee4:	80a0703a 	and	r16,r16,r2
   10ee8:	18803fcc 	andi	r2,r3,255
   10eec:	100695fa 	slli	r3,r2,23
   10ef0:	20803fcc 	andi	r2,r4,255
   10ef4:	100897fa 	slli	r4,r2,31
   10ef8:	00802034 	movhi	r2,128
   10efc:	10bfffc4 	addi	r2,r2,-1
   10f00:	8084703a 	and	r2,r16,r2
   10f04:	10c4b03a 	or	r2,r2,r3
   10f08:	1104b03a 	or	r2,r2,r4
   10f0c:	dfc00217 	ldw	ra,8(sp)
   10f10:	dc400117 	ldw	r17,4(sp)
   10f14:	dc000017 	ldw	r16,0(sp)
   10f18:	dec00304 	addi	sp,sp,12
   10f1c:	f800283a 	ret
   10f20:	01002644 	movi	r4,153
   10f24:	20c01c16 	blt	r4,r3,10f98 <__floatsisf+0x100>
   10f28:	20c9c83a 	sub	r4,r4,r3
   10f2c:	8120983a 	sll	r16,r16,r4
   10f30:	013f0034 	movhi	r4,64512
   10f34:	213fffc4 	addi	r4,r4,-1
   10f38:	814001cc 	andi	r5,r16,7
   10f3c:	8108703a 	and	r4,r16,r4
   10f40:	28000426 	beq	r5,zero,10f54 <__floatsisf+0xbc>
   10f44:	840003cc 	andi	r16,r16,15
   10f48:	01400104 	movi	r5,4
   10f4c:	81400126 	beq	r16,r5,10f54 <__floatsisf+0xbc>
   10f50:	2149883a 	add	r4,r4,r5
   10f54:	2141002c 	andhi	r5,r4,1024
   10f58:	28000526 	beq	r5,zero,10f70 <__floatsisf+0xd8>
   10f5c:	00c027c4 	movi	r3,159
   10f60:	1887c83a 	sub	r3,r3,r2
   10f64:	00bf0034 	movhi	r2,64512
   10f68:	10bfffc4 	addi	r2,r2,-1
   10f6c:	2088703a 	and	r4,r4,r2
   10f70:	202091ba 	slli	r16,r4,6
   10f74:	8809883a 	mov	r4,r17
   10f78:	8020d27a 	srli	r16,r16,9
   10f7c:	003fda06 	br	10ee8 <__alt_data_end+0xffff0ee8>
   10f80:	0009883a 	mov	r4,zero
   10f84:	0007883a 	mov	r3,zero
   10f88:	0021883a 	mov	r16,zero
   10f8c:	003fd606 	br	10ee8 <__alt_data_end+0xffff0ee8>
   10f90:	0121c83a 	sub	r16,zero,r4
   10f94:	003fc806 	br	10eb8 <__alt_data_end+0xffff0eb8>
   10f98:	01002e44 	movi	r4,185
   10f9c:	20c9c83a 	sub	r4,r4,r3
   10fa0:	01400144 	movi	r5,5
   10fa4:	8108983a 	sll	r4,r16,r4
   10fa8:	288bc83a 	sub	r5,r5,r2
   10fac:	8160d83a 	srl	r16,r16,r5
   10fb0:	2008c03a 	cmpne	r4,r4,zero
   10fb4:	8120b03a 	or	r16,r16,r4
   10fb8:	003fdd06 	br	10f30 <__alt_data_end+0xffff0f30>

00010fbc <__extendsfdf2>:
   10fbc:	200ad5fa 	srli	r5,r4,23
   10fc0:	defffd04 	addi	sp,sp,-12
   10fc4:	dc400115 	stw	r17,4(sp)
   10fc8:	29403fcc 	andi	r5,r5,255
   10fcc:	29800044 	addi	r6,r5,1
   10fd0:	04402034 	movhi	r17,128
   10fd4:	dc000015 	stw	r16,0(sp)
   10fd8:	8c7fffc4 	addi	r17,r17,-1
   10fdc:	dfc00215 	stw	ra,8(sp)
   10fe0:	31803fcc 	andi	r6,r6,255
   10fe4:	00800044 	movi	r2,1
   10fe8:	8922703a 	and	r17,r17,r4
   10fec:	2020d7fa 	srli	r16,r4,31
   10ff0:	1180110e 	bge	r2,r6,11038 <__extendsfdf2+0x7c>
   10ff4:	880cd0fa 	srli	r6,r17,3
   10ff8:	8822977a 	slli	r17,r17,29
   10ffc:	2940e004 	addi	r5,r5,896
   11000:	2941ffcc 	andi	r5,r5,2047
   11004:	2804953a 	slli	r2,r5,20
   11008:	01400434 	movhi	r5,16
   1100c:	800697fa 	slli	r3,r16,31
   11010:	297fffc4 	addi	r5,r5,-1
   11014:	314a703a 	and	r5,r6,r5
   11018:	288ab03a 	or	r5,r5,r2
   1101c:	28c6b03a 	or	r3,r5,r3
   11020:	8805883a 	mov	r2,r17
   11024:	dfc00217 	ldw	ra,8(sp)
   11028:	dc400117 	ldw	r17,4(sp)
   1102c:	dc000017 	ldw	r16,0(sp)
   11030:	dec00304 	addi	sp,sp,12
   11034:	f800283a 	ret
   11038:	2800111e 	bne	r5,zero,11080 <__extendsfdf2+0xc4>
   1103c:	88001c26 	beq	r17,zero,110b0 <__extendsfdf2+0xf4>
   11040:	8809883a 	mov	r4,r17
   11044:	00110cc0 	call	110cc <__clzsi2>
   11048:	00c00284 	movi	r3,10
   1104c:	18801b16 	blt	r3,r2,110bc <__extendsfdf2+0x100>
   11050:	018002c4 	movi	r6,11
   11054:	308dc83a 	sub	r6,r6,r2
   11058:	11000544 	addi	r4,r2,21
   1105c:	8986d83a 	srl	r3,r17,r6
   11060:	8922983a 	sll	r17,r17,r4
   11064:	0180e244 	movi	r6,905
   11068:	01400434 	movhi	r5,16
   1106c:	3085c83a 	sub	r2,r6,r2
   11070:	297fffc4 	addi	r5,r5,-1
   11074:	194c703a 	and	r6,r3,r5
   11078:	1141ffcc 	andi	r5,r2,2047
   1107c:	003fe006 	br	11000 <__alt_data_end+0xffff1000>
   11080:	88000826 	beq	r17,zero,110a4 <__extendsfdf2+0xe8>
   11084:	880cd0fa 	srli	r6,r17,3
   11088:	00800434 	movhi	r2,16
   1108c:	10bfffc4 	addi	r2,r2,-1
   11090:	31800234 	orhi	r6,r6,8
   11094:	8822977a 	slli	r17,r17,29
   11098:	308c703a 	and	r6,r6,r2
   1109c:	0141ffc4 	movi	r5,2047
   110a0:	003fd706 	br	11000 <__alt_data_end+0xffff1000>
   110a4:	0141ffc4 	movi	r5,2047
   110a8:	000d883a 	mov	r6,zero
   110ac:	003fd406 	br	11000 <__alt_data_end+0xffff1000>
   110b0:	000b883a 	mov	r5,zero
   110b4:	000d883a 	mov	r6,zero
   110b8:	003fd106 	br	11000 <__alt_data_end+0xffff1000>
   110bc:	11bffd44 	addi	r6,r2,-11
   110c0:	8986983a 	sll	r3,r17,r6
   110c4:	0023883a 	mov	r17,zero
   110c8:	003fe606 	br	11064 <__alt_data_end+0xffff1064>

000110cc <__clzsi2>:
   110cc:	00bfffd4 	movui	r2,65535
   110d0:	11000536 	bltu	r2,r4,110e8 <__clzsi2+0x1c>
   110d4:	00803fc4 	movi	r2,255
   110d8:	11000f36 	bltu	r2,r4,11118 <__clzsi2+0x4c>
   110dc:	00800804 	movi	r2,32
   110e0:	0007883a 	mov	r3,zero
   110e4:	00000506 	br	110fc <__clzsi2+0x30>
   110e8:	00804034 	movhi	r2,256
   110ec:	10bfffc4 	addi	r2,r2,-1
   110f0:	11000c2e 	bgeu	r2,r4,11124 <__clzsi2+0x58>
   110f4:	00800204 	movi	r2,8
   110f8:	00c00604 	movi	r3,24
   110fc:	20c8d83a 	srl	r4,r4,r3
   11100:	00c00074 	movhi	r3,1
   11104:	18c6b504 	addi	r3,r3,6868
   11108:	1909883a 	add	r4,r3,r4
   1110c:	20c00003 	ldbu	r3,0(r4)
   11110:	10c5c83a 	sub	r2,r2,r3
   11114:	f800283a 	ret
   11118:	00800604 	movi	r2,24
   1111c:	00c00204 	movi	r3,8
   11120:	003ff606 	br	110fc <__alt_data_end+0xffff10fc>
   11124:	00800404 	movi	r2,16
   11128:	1007883a 	mov	r3,r2
   1112c:	003ff306 	br	110fc <__alt_data_end+0xffff10fc>

00011130 <__mulsi3>:
   11130:	0005883a 	mov	r2,zero
   11134:	20000726 	beq	r4,zero,11154 <__mulsi3+0x24>
   11138:	20c0004c 	andi	r3,r4,1
   1113c:	2008d07a 	srli	r4,r4,1
   11140:	18000126 	beq	r3,zero,11148 <__mulsi3+0x18>
   11144:	1145883a 	add	r2,r2,r5
   11148:	294b883a 	add	r5,r5,r5
   1114c:	203ffa1e 	bne	r4,zero,11138 <__alt_data_end+0xffff1138>
   11150:	f800283a 	ret
   11154:	f800283a 	ret

00011158 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   11158:	00800074 	movhi	r2,1
   1115c:	10870304 	addi	r2,r2,7180
   11160:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   11164:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   11168:	01000074 	movhi	r4,1
   1116c:	01800044 	movi	r6,1
   11170:	d80b883a 	mov	r5,sp
   11174:	21071a04 	addi	r4,r4,7272
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   11178:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   1117c:	001155c0 	call	1155c <altera_avalon_jtag_uart_read>
   11180:	0080020e 	bge	zero,r2,1118c <alt_getchar+0x34>
        return -1;
    }
    return c;
   11184:	d8800007 	ldb	r2,0(sp)
   11188:	00000106 	br	11190 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
   1118c:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
   11190:	dfc00117 	ldw	ra,4(sp)
   11194:	dec00204 	addi	sp,sp,8
   11198:	f800283a 	ret

0001119c <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1119c:	008007c4 	movi	r2,31
   111a0:	11002136 	bltu	r2,r4,11228 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111a4:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111a8:	00ffff84 	movi	r3,-2
   111ac:	38c4703a 	and	r2,r7,r3
   111b0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   111b4:	200490fa 	slli	r2,r4,3
   111b8:	02000074 	movhi	r8,1
   111bc:	42078604 	addi	r8,r8,7704
   111c0:	4085883a 	add	r2,r8,r2
   111c4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   111c8:	11400115 	stw	r5,4(r2)
   111cc:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   111d0:	30000726 	beq	r6,zero,111f0 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111d4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111d8:	28c6703a 	and	r3,r5,r3
   111dc:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   111e0:	d0e03517 	ldw	r3,-32556(gp)
   111e4:	1104983a 	sll	r2,r2,r4
   111e8:	10c4b03a 	or	r2,r2,r3
   111ec:	00000706 	br	1120c <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   111f0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111f4:	28c6703a 	and	r3,r5,r3
   111f8:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   111fc:	1104983a 	sll	r2,r2,r4
   11200:	d0e03517 	ldw	r3,-32556(gp)
   11204:	0084303a 	nor	r2,zero,r2
   11208:	10c4703a 	and	r2,r2,r3
   1120c:	d0a03515 	stw	r2,-32556(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11210:	d0a03517 	ldw	r2,-32556(gp)
   11214:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11218:	2801703a 	wrctl	status,r5
   1121c:	3801703a 	wrctl	status,r7
   11220:	0005883a 	mov	r2,zero
   11224:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   11228:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   1122c:	f800283a 	ret

00011230 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11230:	deffff04 	addi	sp,sp,-4
   11234:	01000074 	movhi	r4,1
   11238:	01400074 	movhi	r5,1
   1123c:	dfc00015 	stw	ra,0(sp)
   11240:	2106f804 	addi	r4,r4,7136
   11244:	29472104 	addi	r5,r5,7300

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   11248:	2140061e 	bne	r4,r5,11264 <alt_load+0x34>
   1124c:	01000074 	movhi	r4,1
   11250:	01400074 	movhi	r5,1
   11254:	21000804 	addi	r4,r4,32
   11258:	29400804 	addi	r5,r5,32
   1125c:	2140121e 	bne	r4,r5,112a8 <alt_load+0x78>
   11260:	00000b06 	br	11290 <alt_load+0x60>
   11264:	00c00074 	movhi	r3,1
   11268:	18c72104 	addi	r3,r3,7300
   1126c:	1907c83a 	sub	r3,r3,r4
   11270:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11274:	10fff526 	beq	r2,r3,1124c <__alt_data_end+0xffff124c>
    {
      *to++ = *from++;
   11278:	114f883a 	add	r7,r2,r5
   1127c:	39c00017 	ldw	r7,0(r7)
   11280:	110d883a 	add	r6,r2,r4
   11284:	10800104 	addi	r2,r2,4
   11288:	31c00015 	stw	r7,0(r6)
   1128c:	003ff906 	br	11274 <__alt_data_end+0xffff1274>
   11290:	01000074 	movhi	r4,1
   11294:	01400074 	movhi	r5,1
   11298:	21064104 	addi	r4,r4,6404
   1129c:	29464104 	addi	r5,r5,6404

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   112a0:	2140101e 	bne	r4,r5,112e4 <alt_load+0xb4>
   112a4:	00000b06 	br	112d4 <alt_load+0xa4>
   112a8:	00c00074 	movhi	r3,1
   112ac:	18c06004 	addi	r3,r3,384
   112b0:	1907c83a 	sub	r3,r3,r4
   112b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   112b8:	10fff526 	beq	r2,r3,11290 <__alt_data_end+0xffff1290>
    {
      *to++ = *from++;
   112bc:	114f883a 	add	r7,r2,r5
   112c0:	39c00017 	ldw	r7,0(r7)
   112c4:	110d883a 	add	r6,r2,r4
   112c8:	10800104 	addi	r2,r2,4
   112cc:	31c00015 	stw	r7,0(r6)
   112d0:	003ff906 	br	112b8 <__alt_data_end+0xffff12b8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   112d4:	001174c0 	call	1174c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   112d8:	dfc00017 	ldw	ra,0(sp)
   112dc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   112e0:	00118381 	jmpi	11838 <alt_icache_flush_all>
   112e4:	00c00074 	movhi	r3,1
   112e8:	18c6f804 	addi	r3,r3,7136
   112ec:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   112f0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   112f4:	18bff726 	beq	r3,r2,112d4 <__alt_data_end+0xffff12d4>
    {
      *to++ = *from++;
   112f8:	114f883a 	add	r7,r2,r5
   112fc:	39c00017 	ldw	r7,0(r7)
   11300:	110d883a 	add	r6,r2,r4
   11304:	10800104 	addi	r2,r2,4
   11308:	31c00015 	stw	r7,0(r6)
   1130c:	003ff906 	br	112f4 <__alt_data_end+0xffff12f4>

00011310 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11310:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11314:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11318:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1131c:	001152c0 	call	1152c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11320:	001154c0 	call	1154c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11324:	d1a03617 	ldw	r6,-32552(gp)
   11328:	d1603717 	ldw	r5,-32548(gp)
   1132c:	d1203817 	ldw	r4,-32544(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   11330:	dfc00017 	ldw	ra,0(sp)
   11334:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   11338:	00103d81 	jmpi	103d8 <main>

0001133c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   1133c:	defff204 	addi	sp,sp,-56
   11340:	2005883a 	mov	r2,r4
   11344:	dfc00a15 	stw	ra,40(sp)
   11348:	df000915 	stw	fp,36(sp)
   1134c:	ddc00815 	stw	r23,32(sp)
   11350:	dd800715 	stw	r22,28(sp)
   11354:	dd400615 	stw	r21,24(sp)
   11358:	dd000515 	stw	r20,20(sp)
   1135c:	dcc00415 	stw	r19,16(sp)
   11360:	dc800315 	stw	r18,12(sp)
   11364:	dc400215 	stw	r17,8(sp)
   11368:	dc000115 	stw	r16,4(sp)
   1136c:	d9400b15 	stw	r5,44(sp)
   11370:	d9800c15 	stw	r6,48(sp)
   11374:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   11378:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
   1137c:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   11380:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   11384:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   11388:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   1138c:	11000007 	ldb	r4,0(r2)
   11390:	20003a26 	beq	r4,zero,1147c <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   11394:	24000226 	beq	r4,r16,113a0 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   11398:	14400044 	addi	r17,r2,1
   1139c:	00001406 	br	113f0 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   113a0:	14400084 	addi	r17,r2,2
   113a4:	10800047 	ldb	r2,1(r2)
   113a8:	10003426 	beq	r2,zero,1147c <alt_printf+0x140>
            {
                if (c == '%')
   113ac:	1400021e 	bne	r2,r16,113b8 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   113b0:	8009883a 	mov	r4,r16
   113b4:	00000e06 	br	113f0 <alt_printf+0xb4>
                } 
                else if (c == 'c')
   113b8:	1480051e 	bne	r2,r18,113d0 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   113bc:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   113c0:	ad800104 	addi	r22,r21,4
   113c4:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
   113c8:	00114ac0 	call	114ac <alt_putchar>
   113cc:	00002906 	br	11474 <alt_printf+0x138>
                }
                else if (c == 'x')
   113d0:	14c0201e 	bne	r2,r19,11454 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   113d4:	adc00017 	ldw	r23,0(r21)
   113d8:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   113dc:	b8000326 	beq	r23,zero,113ec <alt_printf+0xb0>
   113e0:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   113e4:	00c003c4 	movi	r3,15
   113e8:	00000306 	br	113f8 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   113ec:	01000c04 	movi	r4,48
   113f0:	00114ac0 	call	114ac <alt_putchar>
                        continue;
   113f4:	00001f06 	br	11474 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   113f8:	1d84983a 	sll	r2,r3,r22
   113fc:	15c4703a 	and	r2,r2,r23
   11400:	1000021e 	bne	r2,zero,1140c <alt_printf+0xd0>
                        digit_shift -= 4;
   11404:	b5bfff04 	addi	r22,r22,-4
   11408:	003ffb06 	br	113f8 <__alt_data_end+0xffff13f8>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   1140c:	070003c4 	movi	fp,15
                        if (digit <= 9)
   11410:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   11414:	b0001716 	blt	r22,zero,11474 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   11418:	e588983a 	sll	r4,fp,r22
   1141c:	25c8703a 	and	r4,r4,r23
   11420:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
   11424:	19000236 	bltu	r3,r4,11430 <alt_printf+0xf4>
                            c = '0' + digit;
   11428:	21000c04 	addi	r4,r4,48
   1142c:	00000106 	br	11434 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
   11430:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
   11434:	21003fcc 	andi	r4,r4,255
   11438:	2100201c 	xori	r4,r4,128
   1143c:	213fe004 	addi	r4,r4,-128
   11440:	d8c00015 	stw	r3,0(sp)
   11444:	00114ac0 	call	114ac <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   11448:	b5bfff04 	addi	r22,r22,-4
   1144c:	d8c00017 	ldw	r3,0(sp)
   11450:	003ff006 	br	11414 <__alt_data_end+0xffff1414>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   11454:	1500071e 	bne	r2,r20,11474 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   11458:	ad800017 	ldw	r22,0(r21)
   1145c:	ad400104 	addi	r21,r21,4

                    while(*s)
   11460:	b1000007 	ldb	r4,0(r22)
   11464:	20000326 	beq	r4,zero,11474 <alt_printf+0x138>
                      alt_putchar(*s++);
   11468:	b5800044 	addi	r22,r22,1
   1146c:	00114ac0 	call	114ac <alt_putchar>
   11470:	003ffb06 	br	11460 <__alt_data_end+0xffff1460>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   11474:	8805883a 	mov	r2,r17
   11478:	003fc406 	br	1138c <__alt_data_end+0xffff138c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   1147c:	dfc00a17 	ldw	ra,40(sp)
   11480:	df000917 	ldw	fp,36(sp)
   11484:	ddc00817 	ldw	r23,32(sp)
   11488:	dd800717 	ldw	r22,28(sp)
   1148c:	dd400617 	ldw	r21,24(sp)
   11490:	dd000517 	ldw	r20,20(sp)
   11494:	dcc00417 	ldw	r19,16(sp)
   11498:	dc800317 	ldw	r18,12(sp)
   1149c:	dc400217 	ldw	r17,8(sp)
   114a0:	dc000117 	ldw	r16,4(sp)
   114a4:	dec00e04 	addi	sp,sp,56
   114a8:	f800283a 	ret

000114ac <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   114ac:	defffd04 	addi	sp,sp,-12
   114b0:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
   114b4:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   114b8:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   114bc:	01000074 	movhi	r4,1
   114c0:	000f883a 	mov	r7,zero
   114c4:	01800044 	movi	r6,1
   114c8:	d80b883a 	mov	r5,sp
   114cc:	21071a04 	addi	r4,r4,7272
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   114d0:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
   114d4:	00115b80 	call	115b8 <altera_avalon_jtag_uart_write>
   114d8:	00ffffc4 	movi	r3,-1
   114dc:	10c00126 	beq	r2,r3,114e4 <alt_putchar+0x38>
        return -1;
    }
    return c;
   114e0:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
   114e4:	dfc00217 	ldw	ra,8(sp)
   114e8:	dc000117 	ldw	r16,4(sp)
   114ec:	dec00304 	addi	sp,sp,12
   114f0:	f800283a 	ret

000114f4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   114f4:	defffe04 	addi	sp,sp,-8
   114f8:	dc000015 	stw	r16,0(sp)
   114fc:	dfc00115 	stw	ra,4(sp)
   11500:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   11504:	00118e80 	call	118e8 <strlen>
   11508:	01000074 	movhi	r4,1
   1150c:	000f883a 	mov	r7,zero
   11510:	100d883a 	mov	r6,r2
   11514:	800b883a 	mov	r5,r16
   11518:	21071a04 	addi	r4,r4,7272
#else
    return fputs(str, stdout);
#endif
#endif
}
   1151c:	dfc00117 	ldw	ra,4(sp)
   11520:	dc000017 	ldw	r16,0(sp)
   11524:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   11528:	00115b81 	jmpi	115b8 <altera_avalon_jtag_uart_write>

0001152c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1152c:	deffff04 	addi	sp,sp,-4
   11530:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   11534:	001183c0 	call	1183c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   11538:	00800044 	movi	r2,1
   1153c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11540:	dfc00017 	ldw	ra,0(sp)
   11544:	dec00104 	addi	sp,sp,4
   11548:	f800283a 	ret

0001154c <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1154c:	01000074 	movhi	r4,1
   11550:	d1600304 	addi	r5,gp,-32756
   11554:	2106f804 	addi	r4,r4,7136
   11558:	00117581 	jmpi	11758 <alt_dev_llist_insert>

0001155c <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   1155c:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
   11560:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   11564:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   11568:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   1156c:	11800b2e 	bgeu	r2,r6,1159c <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11570:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   11574:	1a60000c 	andi	r9,r3,32768
   11578:	48000326 	beq	r9,zero,11588 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1157c:	10c00005 	stb	r3,0(r2)
   11580:	10800044 	addi	r2,r2,1
   11584:	003ff906 	br	1156c <__alt_data_end+0xffff156c>
    else if (ptr != buffer)
   11588:	11400226 	beq	r2,r5,11594 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
   1158c:	1145c83a 	sub	r2,r2,r5
   11590:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   11594:	403ff526 	beq	r8,zero,1156c <__alt_data_end+0xffff156c>
   11598:	00000106 	br	115a0 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
   1159c:	117ffb1e 	bne	r2,r5,1158c <__alt_data_end+0xffff158c>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   115a0:	39d0000c 	andi	r7,r7,16384
   115a4:	3800021e 	bne	r7,zero,115b0 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
   115a8:	00bffec4 	movi	r2,-5
   115ac:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   115b0:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   115b4:	f800283a 	ret

000115b8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   115b8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   115bc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   115c0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   115c4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   115c8:	2980072e 	bgeu	r5,r6,115e8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   115cc:	38c00037 	ldwio	r3,0(r7)
   115d0:	18ffffec 	andhi	r3,r3,65535
   115d4:	183ffc26 	beq	r3,zero,115c8 <__alt_data_end+0xffff15c8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   115d8:	28c00007 	ldb	r3,0(r5)
   115dc:	20c00035 	stwio	r3,0(r4)
   115e0:	29400044 	addi	r5,r5,1
   115e4:	003ff806 	br	115c8 <__alt_data_end+0xffff15c8>

  return count;
}
   115e8:	f800283a 	ret

000115ec <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   115ec:	d1600304 	addi	r5,gp,-32756
   115f0:	00117c41 	jmpi	117c4 <alt_find_dev>

000115f4 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   115f4:	20800a17 	ldw	r2,40(r4)
   115f8:	10800023 	ldbuio	r2,0(r2)
   115fc:	28800005 	stb	r2,0(r5)

	return 0;
}
   11600:	0005883a 	mov	r2,zero
   11604:	f800283a 	ret

00011608 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11608:	20800a17 	ldw	r2,40(r4)
   1160c:	29400fcc 	andi	r5,r5,63
   11610:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11614:	20800a17 	ldw	r2,40(r4)
   11618:	10800063 	ldbuio	r2,1(r2)
   1161c:	30800005 	stb	r2,0(r6)

	return 0;
}
   11620:	0005883a 	mov	r2,zero
   11624:	f800283a 	ret

00011628 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11628:	20800a17 	ldw	r2,40(r4)
   1162c:	29400fcc 	andi	r5,r5,63
   11630:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   11634:	20800a17 	ldw	r2,40(r4)
   11638:	11800065 	stbio	r6,1(r2)

	return 0;
}
   1163c:	0005883a 	mov	r2,zero
   11640:	f800283a 	ret

00011644 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11644:	20800a17 	ldw	r2,40(r4)
   11648:	00c00c84 	movi	r3,50
   1164c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11650:	20800a17 	ldw	r2,40(r4)
   11654:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11658:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1165c:	10803fcc 	andi	r2,r2,255
   11660:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11664:	20800a17 	ldw	r2,40(r4)
   11668:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1166c:	20800a17 	ldw	r2,40(r4)
   11670:	10800063 	ldbuio	r2,1(r2)
   11674:	10803fcc 	andi	r2,r2,255
   11678:	1006923a 	slli	r3,r2,8
   1167c:	28800017 	ldw	r2,0(r5)
   11680:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   11684:	10e0000c 	andi	r3,r2,32768
   11688:	18000126 	beq	r3,zero,11690 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   1168c:	10bffff4 	orhi	r2,r2,65535
   11690:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11694:	0005883a 	mov	r2,zero
   11698:	f800283a 	ret

0001169c <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1169c:	20800a17 	ldw	r2,40(r4)
   116a0:	00c00d04 	movi	r3,52
   116a4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   116a8:	20800a17 	ldw	r2,40(r4)
   116ac:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   116b0:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   116b4:	10803fcc 	andi	r2,r2,255
   116b8:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   116bc:	20800a17 	ldw	r2,40(r4)
   116c0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   116c4:	20800a17 	ldw	r2,40(r4)
   116c8:	10800063 	ldbuio	r2,1(r2)
   116cc:	10803fcc 	andi	r2,r2,255
   116d0:	1006923a 	slli	r3,r2,8
   116d4:	28800017 	ldw	r2,0(r5)
   116d8:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   116dc:	10e0000c 	andi	r3,r2,32768
   116e0:	18000126 	beq	r3,zero,116e8 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   116e4:	10bffff4 	orhi	r2,r2,65535
   116e8:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   116ec:	0005883a 	mov	r2,zero
   116f0:	f800283a 	ret

000116f4 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   116f4:	20800a17 	ldw	r2,40(r4)
   116f8:	00c00d84 	movi	r3,54
   116fc:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11700:	20800a17 	ldw	r2,40(r4)
   11704:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11708:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1170c:	10803fcc 	andi	r2,r2,255
   11710:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11714:	20800a17 	ldw	r2,40(r4)
   11718:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1171c:	20800a17 	ldw	r2,40(r4)
   11720:	10800063 	ldbuio	r2,1(r2)
   11724:	10803fcc 	andi	r2,r2,255
   11728:	1006923a 	slli	r3,r2,8
   1172c:	28800017 	ldw	r2,0(r5)
   11730:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   11734:	10e0000c 	andi	r3,r2,32768
   11738:	18000126 	beq	r3,zero,11740 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   1173c:	10bffff4 	orhi	r2,r2,65535
   11740:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11744:	0005883a 	mov	r2,zero
   11748:	f800283a 	ret

0001174c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1174c:	f800283a 	ret

00011750 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   11750:	3005883a 	mov	r2,r6
   11754:	f800283a 	ret

00011758 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11758:	20000226 	beq	r4,zero,11764 <alt_dev_llist_insert+0xc>
   1175c:	20800217 	ldw	r2,8(r4)
   11760:	1000101e 	bne	r2,zero,117a4 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11764:	d0a00717 	ldw	r2,-32740(gp)
   11768:	10000926 	beq	r2,zero,11790 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1176c:	deffff04 	addi	sp,sp,-4
   11770:	dfc00015 	stw	ra,0(sp)
   11774:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11778:	00c00584 	movi	r3,22
   1177c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   11780:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   11784:	dfc00017 	ldw	ra,0(sp)
   11788:	dec00104 	addi	sp,sp,4
   1178c:	f800283a 	ret
   11790:	d0a03a04 	addi	r2,gp,-32536
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   11794:	00c00584 	movi	r3,22
   11798:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1179c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   117a0:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   117a4:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   117a8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   117ac:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   117b0:	28800017 	ldw	r2,0(r5)
   117b4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   117b8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   117bc:	0005883a 	mov	r2,zero
   117c0:	f800283a 	ret

000117c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   117c4:	defffb04 	addi	sp,sp,-20
   117c8:	dcc00315 	stw	r19,12(sp)
   117cc:	dc800215 	stw	r18,8(sp)
   117d0:	dc400115 	stw	r17,4(sp)
   117d4:	dc000015 	stw	r16,0(sp)
   117d8:	dfc00415 	stw	ra,16(sp)
   117dc:	2027883a 	mov	r19,r4
   117e0:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   117e4:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   117e8:	00118e80 	call	118e8 <strlen>
   117ec:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   117f0:	84400726 	beq	r16,r17,11810 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   117f4:	81000217 	ldw	r4,8(r16)
   117f8:	900d883a 	mov	r6,r18
   117fc:	980b883a 	mov	r5,r19
   11800:	00118b80 	call	118b8 <memcmp>
   11804:	10000426 	beq	r2,zero,11818 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   11808:	84000017 	ldw	r16,0(r16)
   1180c:	003ff806 	br	117f0 <__alt_data_end+0xffff17f0>
  }
  
  /* No match found */
  
  return NULL;
   11810:	0005883a 	mov	r2,zero
   11814:	00000106 	br	1181c <alt_find_dev+0x58>
   11818:	8005883a 	mov	r2,r16
}
   1181c:	dfc00417 	ldw	ra,16(sp)
   11820:	dcc00317 	ldw	r19,12(sp)
   11824:	dc800217 	ldw	r18,8(sp)
   11828:	dc400117 	ldw	r17,4(sp)
   1182c:	dc000017 	ldw	r16,0(sp)
   11830:	dec00504 	addi	sp,sp,20
   11834:	f800283a 	ret

00011838 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11838:	f800283a 	ret

0001183c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   1183c:	000170fa 	wrctl	ienable,zero
   11840:	f800283a 	ret

00011844 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   11844:	213ffe84 	addi	r4,r4,-6
   11848:	008003c4 	movi	r2,15
   1184c:	11001636 	bltu	r2,r4,118a8 <alt_exception_cause_generated_bad_addr+0x64>
   11850:	200890ba 	slli	r4,r4,2
   11854:	00800074 	movhi	r2,1
   11858:	10861a04 	addi	r2,r2,6248
   1185c:	2089883a 	add	r4,r4,r2
   11860:	20800017 	ldw	r2,0(r4)
   11864:	1000683a 	jmp	r2
   11868:	000118b0 	cmpltui	zero,zero,1122
   1186c:	000118b0 	cmpltui	zero,zero,1122
   11870:	000118a8 	cmpgeui	zero,zero,1122
   11874:	000118a8 	cmpgeui	zero,zero,1122
   11878:	000118a8 	cmpgeui	zero,zero,1122
   1187c:	000118b0 	cmpltui	zero,zero,1122
   11880:	000118a8 	cmpgeui	zero,zero,1122
   11884:	000118a8 	cmpgeui	zero,zero,1122
   11888:	000118b0 	cmpltui	zero,zero,1122
   1188c:	000118b0 	cmpltui	zero,zero,1122
   11890:	000118a8 	cmpgeui	zero,zero,1122
   11894:	000118b0 	cmpltui	zero,zero,1122
   11898:	000118a8 	cmpgeui	zero,zero,1122
   1189c:	000118a8 	cmpgeui	zero,zero,1122
   118a0:	000118a8 	cmpgeui	zero,zero,1122
   118a4:	000118b0 	cmpltui	zero,zero,1122
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   118a8:	0005883a 	mov	r2,zero
   118ac:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   118b0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   118b4:	f800283a 	ret

000118b8 <memcmp>:
   118b8:	218d883a 	add	r6,r4,r6
   118bc:	21800826 	beq	r4,r6,118e0 <memcmp+0x28>
   118c0:	20800003 	ldbu	r2,0(r4)
   118c4:	28c00003 	ldbu	r3,0(r5)
   118c8:	10c00226 	beq	r2,r3,118d4 <memcmp+0x1c>
   118cc:	10c5c83a 	sub	r2,r2,r3
   118d0:	f800283a 	ret
   118d4:	21000044 	addi	r4,r4,1
   118d8:	29400044 	addi	r5,r5,1
   118dc:	003ff706 	br	118bc <__alt_data_end+0xffff18bc>
   118e0:	0005883a 	mov	r2,zero
   118e4:	f800283a 	ret

000118e8 <strlen>:
   118e8:	2005883a 	mov	r2,r4
   118ec:	10c00007 	ldb	r3,0(r2)
   118f0:	18000226 	beq	r3,zero,118fc <strlen+0x14>
   118f4:	10800044 	addi	r2,r2,1
   118f8:	003ffc06 	br	118ec <__alt_data_end+0xffff18ec>
   118fc:	1105c83a 	sub	r2,r2,r4
   11900:	f800283a 	ret
